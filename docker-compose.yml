version: '3.8'

# LM Watermark Lab - Docker Compose Configuration
# Provides complete development and production environment

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-01-27}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: lm-watermark-lab:${VERSION:-latest}
    container_name: watermark-lab-app
    restart: unless-stopped
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-watermark_lab}
      - MODEL_CACHE_PATH=/app/data/models
      - DATA_ROOT=/app/data
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - watermark-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: lm-watermark-lab:dev
    container_name: watermark-lab-dev
    ports:
      - "${DEV_PORT:-8081}:8080"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - RELOAD=true
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - watermark-network
    profiles:
      - dev

  # GPU-enabled service
  app-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu
    image: lm-watermark-lab:gpu
    container_name: watermark-lab-gpu
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - CUDA_VISIBLE_DEVICES=0
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "${GPU_PORT:-8082}:8080"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - watermark-network
    profiles:
      - gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: lm-watermark-lab:${VERSION:-latest}
    container_name: watermark-lab-worker
    restart: unless-stopped
    command: celery -A watermark_lab.worker worker --loglevel=info --concurrency=2
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MODEL_CACHE_PATH=/app/data/models
      - DATA_ROOT=/app/data
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - watermark-network

  # Celery beat scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: lm-watermark-lab:${VERSION:-latest}
    container_name: watermark-lab-scheduler
    restart: unless-stopped
    command: celery -A watermark_lab.worker beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - watermark-network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: watermark-lab-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - watermark-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: watermark-lab-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-watermark_lab}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - watermark-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: watermark-lab-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/static:/var/www/static:ro
    depends_on:
      - app
    networks:
      - watermark-network
    profiles:
      - production

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: watermark-lab-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - watermark-network
    profiles:
      - monitoring

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: watermark-lab-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - watermark-network
    profiles:
      - monitoring

  # Jupyter Lab for development
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: lm-watermark-lab:dev
    container_name: watermark-lab-jupyter
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    depends_on:
      - redis
    networks:
      - watermark-network
    profiles:
      - dev

  # Streamlit dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: lm-watermark-lab:${VERSION:-latest}
    container_name: watermark-lab-dashboard
    command: streamlit run src/watermark_lab/dashboard/main.py --server.port=8501 --server.address=0.0.0.0
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - API_BASE_URL=http://app:8080
    volumes:
      - ./data:/app/data
    depends_on:
      - app
      - redis
    networks:
      - watermark-network
    profiles:
      - dashboard

  # Load testing with Locust
  loadtest:
    image: locustio/locust
    container_name: watermark-lab-loadtest
    ports:
      - "${LOCUST_PORT:-8089}:8089"
    volumes:
      - ./tests/load:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host=http://app:8080
    networks:
      - watermark-network
    profiles:
      - loadtest

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  watermark-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16