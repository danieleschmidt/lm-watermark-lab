# Advanced CI Workflow Example
# This is an enhanced CI workflow with additional features
# Copy to .github/workflows/ when ready to use

name: Advanced CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'bugfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance benchmarks'
        required: false
        default: 'false'
        type: boolean
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: 'true'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-flight checks
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.changes.outputs.python == 'true' || steps.changes.outputs.tests == 'true' }}
      should-run-build: ${{ steps.changes.outputs.docker == 'true' || steps.changes.outputs.python == 'true' }}
      should-run-docs: ${{ steps.changes.outputs.docs == 'true' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          python:
            - 'src/**/*.py'
            - 'pyproject.toml'
            - 'requirements*.txt'
          tests:
            - 'tests/**'
          docker:
            - 'Dockerfile'
            - 'docker-compose*.yml'
          docs:
            - 'docs/**'
            - '*.md'

  # Code quality and security
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
          .mypy_cache
        key: ${{ runner.os }}-quality-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '.pre-commit-config.yaml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files --show-diff-on-failure

    - name: Run advanced linting
      run: |
        # Pylint with detailed reporting
        pylint src/ --output-format=json:pylint-report.json,colorized || true
        
        # Flake8 with complexity analysis
        flake8 src/ --format=json --output-file=flake8-report.json --max-complexity=10
        
        # Mypy with detailed error reporting
        mypy src/ --junit-xml=mypy-results.xml --html-report=mypy-report

    - name: Security analysis
      run: |
        # Bandit security analysis
        bandit -r src/ -f json -o bandit-report.json
        
        # Safety vulnerability check
        safety check --json --output safety-report.json
        
        # Semgrep static analysis
        pip install semgrep
        semgrep --config=auto src/ --json --output=semgrep-report.json || true

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: |
          *-report.json
          *-results.xml
          mypy-report/

  # Comprehensive testing
  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    needs: [pre-flight, quality-gate]
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster execution
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.12"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache test dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          .pytest_cache
        key: ${{ runner.os }}-test-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --junitxml=test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml \
          --cov=src/watermark_lab \
          --cov-report=xml:coverage-${{ matrix.os }}-${{ matrix.python-version }}.xml \
          --cov-report=html:htmlcov-${{ matrix.os }}-${{ matrix.python-version }}/ \
          --cov-fail-under=80 \
          -v

    - name: Run integration tests
      if: github.event.inputs.run_integration_tests == 'true' || github.event_name != 'workflow_dispatch'
      run: |
        pytest tests/integration/ \
          --junitxml=integration-results-${{ matrix.os }}-${{ matrix.python-version }}.xml \
          -v

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results-*.xml
          integration-results-*.xml
          coverage-*.xml
          htmlcov-*/

  # Performance benchmarking
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: pre-flight
    if: github.event.inputs.run_performance_tests == 'true' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ \
          --benchmark-json=benchmark-results.json \
          --benchmark-min-rounds=3 \
          --benchmark-max-time=300 \
          -v

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: Python Benchmark
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Container building and scanning
  container:
    name: Container Build & Scan
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-build == 'true'
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Load image for scanning
      run: docker load --input /tmp/image.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Documentation
  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-docs == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Check documentation links
      run: |
        pip install linkchecker
        linkchecker docs/_build/html/

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # Notification and summary
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate, test-matrix, performance, container, documentation]
    if: always()

    steps:
    - name: Collect job results
      id: results
      run: |
        echo "quality=${{ needs.quality-gate.result }}" >> $GITHUB_OUTPUT
        echo "tests=${{ needs.test-matrix.result }}" >> $GITHUB_OUTPUT
        echo "performance=${{ needs.performance.result }}" >> $GITHUB_OUTPUT
        echo "container=${{ needs.container.result }}" >> $GITHUB_OUTPUT
        echo "docs=${{ needs.documentation.result }}" >> $GITHUB_OUTPUT

    - name: Send Slack notification
      if: failure() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#ci-alerts'
        text: 'Advanced CI pipeline failed on main branch'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create job summary
      run: |
        echo "## 🚀 Advanced CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Gate | ${{ steps.results.outputs.quality }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Matrix | ${{ steps.results.outputs.tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ steps.results.outputs.performance }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container | ${{ steps.results.outputs.container }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ steps.results.outputs.docs }} |" >> $GITHUB_STEP_SUMMARY