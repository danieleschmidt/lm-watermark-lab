name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.9"

jobs:
  dependency-security-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit bandit[toml]

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report || true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt || true

    - name: Run Semgrep security scanner
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        semgrep --config=auto src/ || true

    - name: Upload SAST reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-reports
        path: |
          bandit-report.json
          semgrep-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitGuardian scan
      uses: GitGuardian/ggshield-action@v1.25.0
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

    - name: Run TruffleHog secrets scanner
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t watermark-lab:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'watermark-lab:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: "watermark-lab:security-scan"
        fail-build: false
        output-format: sarif
        output-file: grype-results.sarif

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'grype-results.sarif'

  infrastructure-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Checkov IaC security scanner
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif
        quiet: true
        soft_fail: true

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'checkov-results.sarif'

    - name: Scan GitHub Actions workflows
      uses: rhysd/actionlint@v1
      with:
        fail-on-error: false

  license-compliance-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        python scripts/check_licenses.py > license-compliance-report.txt

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.csv
          license-compliance-report.txt

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check security policy exists
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "❌ SECURITY.md file is missing"
          exit 1
        else
          echo "✅ SECURITY.md file exists"
        fi

    - name: Validate security configurations
      run: |
        # Check for security headers in nginx/apache configs
        echo "🔍 Checking security configurations..."
        
        # Check Dockerfile security practices
        if [ -f Dockerfile ]; then
          echo "📋 Checking Dockerfile security..."
          if grep -q "USER root" Dockerfile && ! grep -q "USER.*[^root]" Dockerfile; then
            echo "⚠️ Warning: Container may be running as root"
          fi
          
          if ! grep -q "HEALTHCHECK" Dockerfile; then
            echo "⚠️ Warning: No health check configured"
          fi
        fi
        
        # Check for .env files in repository (security risk)
        if find . -name ".env" -not -path "./.git/*" | grep -q "."; then
          echo "❌ Error: .env files found in repository"
          exit 1
        fi
        
        echo "✅ Security configuration checks completed"

  sbom-generation:
    name: Software Bill of Materials (SBOM)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cyclonedx-bom pip-licenses

    - name: Generate SBOM
      run: |
        # Generate Python SBOM
        cyclonedx-py -o sbom-python.json
        
        # Generate license information
        pip-licenses --format=json > licenses-detailed.json
        
        # Create comprehensive SBOM report
        echo "# Software Bill of Materials (SBOM)" > SBOM.md
        echo "Generated on: $(date)" >> SBOM.md
        echo "" >> SBOM.md
        echo "## Python Dependencies" >> SBOM.md
        pip-licenses --format=markdown >> SBOM.md

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sbom-reports
        path: |
          sbom-python.json
          licenses-detailed.json
          SBOM.md

  vulnerability-database-update:
    name: Update Vulnerability Database
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update Trivy database
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Update vulnerability database
        trivy image --download-db-only

    - name: Create security dashboard data
      run: |
        echo "# Security Dashboard Data" > security-dashboard.json
        echo "{" >> security-dashboard.json
        echo '  "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",' >> security-dashboard.json
        echo '  "scan_status": "completed",' >> security-dashboard.json
        echo '  "vulnerability_db_version": "latest"' >> security-dashboard.json
        echo "}" >> security-dashboard.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-security-scan, sast-scan, secrets-scan, container-security-scan, license-compliance-scan]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive security report
      run: |
        echo "# 🔒 Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## 📊 Scan Results Summary" >> security-report.md
        echo "" >> security-report.md
        
        # Check if dependency scan results exist
        if [ -f dependency-security-reports/safety-report.json ]; then
          echo "### Dependency Security" >> security-report.md
          echo "- ✅ Safety check completed" >> security-report.md
          echo "- ✅ Pip-audit completed" >> security-report.md
        else
          echo "### Dependency Security" >> security-report.md
          echo "- ❌ Scans failed or not completed" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### Static Analysis Security Testing (SAST)" >> security-report.md
        if [ -f sast-reports/bandit-report.json ]; then
          echo "- ✅ Bandit scan completed" >> security-report.md
          echo "- ✅ Semgrep scan completed" >> security-report.md
        else
          echo "- ❌ SAST scans failed or not completed" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### Container Security" >> security-report.md
        echo "- ✅ Container vulnerability scanning completed" >> security-report.md
        
        echo "" >> security-report.md
        echo "### License Compliance" >> security-report.md
        if [ -f license-reports/licenses.json ]; then
          echo "- ✅ License compliance check completed" >> security-report.md
        else
          echo "- ❌ License compliance check failed" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## 🔍 Recommendations" >> security-report.md
        echo "1. Review all high and critical severity findings" >> security-report.md
        echo "2. Update dependencies with known vulnerabilities" >> security-report.md
        echo "3. Address any license compliance issues" >> security-report.md
        echo "4. Implement suggested security best practices" >> security-report.md
        
        echo "" >> security-report.md
        echo "## 📋 Next Steps" >> security-report.md
        echo "- [ ] Review detailed scan reports" >> security-report.md
        echo "- [ ] Create issues for high-priority findings" >> security-report.md
        echo "- [ ] Update security documentation" >> security-report.md
        echo "- [ ] Schedule follow-up security review" >> security-report.md

    - name: Upload consolidated security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${report}`
          });

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [security-report]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send security alert
      run: |
        echo "🚨 Security scan failures detected in main branch"
        echo "Please review the security report and take immediate action"
        # Add notification logic here (Slack, email, etc.)