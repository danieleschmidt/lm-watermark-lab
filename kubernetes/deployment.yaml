apiVersion: apps/v1
kind: Deployment
metadata:
  name: lm-watermark-lab
  namespace: production
  labels:
    app: lm-watermark-lab
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: lm-watermark-lab
  template:
    metadata:
      labels:
        app: lm-watermark-lab
        version: v1.0.0
    spec:
      containers:
      - name: watermark-lab
        image: lm-watermark-lab:1.0.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: LOG_LEVEL
          value: "INFO"
        - name: DEBUG
          value: "false"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: watermark-lab-secrets
              key: redis-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: watermark-lab-secrets
              key: database-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: watermark-lab-secrets
              key: secret-key
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: model-cache
          mountPath: /app/models
        - name: data-storage
          mountPath: /app/data
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-storage-pvc
      - name: config
        configMap:
          name: watermark-lab-config
      nodeSelector:
        tier: application
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "watermark-lab"
        effect: "NoSchedule"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lm-watermark-lab-worker
  namespace: production
  labels:
    app: lm-watermark-lab-worker
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: lm-watermark-lab-worker
  template:
    metadata:
      labels:
        app: lm-watermark-lab-worker
        version: v1.0.0
    spec:
      containers:
      - name: worker
        image: lm-watermark-lab:1.0.0
        command: ["celery"]
        args: ["-A", "watermark_lab.worker", "worker", "--loglevel=info", "--concurrency=2"]
        env:
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: watermark-lab-secrets
              key: redis-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: watermark-lab-secrets
              key: database-url
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: model-cache
          mountPath: /app/models
        - name: data-storage
          mountPath: /app/data
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-storage-pvc
      nodeSelector:
        tier: worker

---
apiVersion: v1
kind: Service
metadata:
  name: lm-watermark-lab-service
  namespace: production
  labels:
    app: lm-watermark-lab
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: lm-watermark-lab

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lm-watermark-lab-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.watermark-lab.com
    secretName: watermark-lab-tls
  rules:
  - host: api.watermark-lab.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: lm-watermark-lab-service
            port:
              number: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: watermark-lab-config
  namespace: production
data:
  config.yaml: |
    app:
      name: "LM Watermark Lab"
      version: "1.0.0"
      environment: "production"
    
    api:
      host: "0.0.0.0"
      port: 8080
      workers: 4
      timeout: 300
      max_requests: 1000
    
    logging:
      level: "INFO"
      format: "json"
      handlers:
        - console
        - file
    
    cache:
      type: "redis"
      ttl: 3600
      max_size: "1GB"
    
    models:
      cache_dir: "/app/models"
      max_size: "10GB"
      download_timeout: 600
    
    compliance:
      gdpr_enabled: true
      ccpa_enabled: true
      pdpa_enabled: true
      data_retention_days: 365
    
    monitoring:
      metrics_enabled: true
      tracing_enabled: true
      health_check_interval: 30

---
apiVersion: v1
kind: Secret
metadata:
  name: watermark-lab-secrets
  namespace: production
type: Opaque
stringData:
  redis-url: "redis://redis:6379/0"
  database-url: "postgresql://postgres:password@postgres:5432/watermark_lab"
  secret-key: "your-secret-key-here"
  jwt-secret: "your-jwt-secret-here"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-cache-pvc
  namespace: production
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-storage-pvc
  namespace: production
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 100Gi

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: lm-watermark-lab-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lm-watermark-lab
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80